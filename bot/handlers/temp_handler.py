from aiogram import types
from aiogram.dispatcher.filters import Text, ChatTypeFilter
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from api.Turtle_API import API
from bot.keyboards import general_keyboards
from bot.messages_localization import messages_registration, messages_help

class RegisterUser(StatesGroup):
    registration_one = State()
    registration_two = State()


# –ó–∞–ø—É—Å–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def begin(message: types.Message):
    await RegisterUser.registration_one.set()
    await message.answer(text='üëÄ –ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –¥–∞–≤–∞–π —è –ø–æ–º–æ–≥—É –≤ –Ω–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.', reply_markup=general_keyboards.full_choice_keyboard())

async def interceptor(callback: types.CallbackQuery):
    await callback.answer()

async def stop(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text(text='üìå –ï—Å–ª–∏ —Ç–µ–±–µ –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è".\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:')
    await callback.message.answer(text=messages_help.help_message)
async def interrupt(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text(text='–ö–∞–∫ —Å–∫–∞–∂–µ—à—å üê¢\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:')
    await callback.message.answer(text=messages_help.help_message)

async def yes_agree(callback: types.CallbackQuery):
    await RegisterUser.next()
    await callback.message.edit_text(text=messages_registration.registration_enter_group)


async def finish(message: types.Message, state: FSMContext):
    if message.text.upper() in API().take_group_list().get('group'):
        await message.answer(text=messages_registration.registration_finish, reply_markup=general_keyboards.full_keyboard(group=message.text.upper()))
        await state.finish()
    else:
        await message.answer(text=messages_registration.registration_no_group, reply_markup=general_keyboards.no_registration_keyboard())
# –§—É–Ω–∫—Ü–∏—è- —Ä–µ–≥–∏—Å—Ç–∞—Ä–æ—Ç–æ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

async def my_group(message: types.Message):
    filtered_message = lambda message: message.text.lower().replace('–º–æ—è –≥—Ä—É–ø–ø–∞ ', '').upper()
    if filtered_message(message=message) in API().take_group_list().get('group'):
        await message.answer(text=messages_registration.registration_finish, reply_markup=general_keyboards.full_keyboard(group=filtered_message(message=message)))
    else:
        await message.answer(text='[üö´] –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –≥—Ä—É–ø–ø—É, –ø—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –≥—Ä—É–ø–ø—É.')

async def del_keyboard(message: types.Message):
    await message.answer(text='[‚úÖ] –£–±—Ä–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', reply_markup=general_keyboards.ReplyKeyboardRemove())


def register_temp_chat_handlers(dp: Dispatcher):
    dp.register_message_handler(begin, commands=['start'])
    dp.register_message_handler(begin, ChatTypeFilter(chat_type=types.ChatType.PRIVATE), Text(equals=messages_registration.equals.get('start'), ignore_case=True), state=None)
    dp.register_callback_query_handler(interrupt, Text(equals=messages_registration.equals.get('interrupt'), ignore_case=True), state="*")
    dp.register_callback_query_handler(stop, Text(equals=messages_registration.equals.get('stop'), ignore_case=True), state="*")
    dp.register_callback_query_handler(yes_agree, Text(equals=messages_registration.equals.get('continue')), state=RegisterUser.registration_one)
    dp.register_message_handler(finish, content_types='text', state=RegisterUser.registration_two)
    dp.register_message_handler(my_group, lambda message: "–º–æ—è –≥—Ä—É–ø–ø–∞" in message.text.lower())
    dp.register_message_handler(del_keyboard, Text(equals='—É–±–µ—Ä–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É', ignore_case=True))
